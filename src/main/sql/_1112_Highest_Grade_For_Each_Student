-- Write a SQL query to find the highest grade with its corresponding course for each student. In case of a tie, you should find the course with the smallest course_id. The output must be sorted by increasing student_id.
select student_id, min(course_id) as 'course_id', grade from enrollments where (student_id, grade) in (select student_id, max(grade) as 'grade'
from enrollments
group by student_id)
group by student_id, grade
order by student_id;

select student_id, min(course_id) as 'course_id', grade from (select student_id, course_id, grade
from enrollments where (student_id, grade) in
(select student_id, max(grade) as 'grade'
from enrollments
group by student_id)
) as sub
group by sub.student_id, sub.grade
order by student_id;

-- Using window functions: row number guarantees the unique rank for each row in the partition. This DOESN'T WORK in LC as its compiler doesn't support window functions
select student_id, course_id, grade from (select student_id, course_id, grade, ROW_NUMBER() over(partition by student_id order by grade desc, course_id asc) as 'ranking'
from enrollments) as sub
where sub.ranking=1
order by student_id;